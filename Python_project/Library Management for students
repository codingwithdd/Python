from tkinter import *
from tkinter import ttk
from typing import ItemsView
import mysql.connector
from tkinter import messagebox
import datetime
#from tkinter.ttk import *


class Library_ManagementSystem():
    def __init__(self,root):
        self.root=root
        self.root.title("Library Management System")
        self.root.geometry("1500x800+0+0")


        # ======================== Variable =========================

        self.membertype_var=StringVar()
        self.prnno_var=StringVar()
        self.id_var=StringVar()
        self.firstname_var=StringVar()
        self.lastname_var=StringVar()
        self.address1_var=StringVar()
        self.address2_var=StringVar()
        self.postcode_var=StringVar()
        self.mobile_var=StringVar()
        self.bookid_var=StringVar()
        self.booktitle_var=StringVar()
        self.auther_var=StringVar()
        self.dateborrowed_var=StringVar()
        self.datedue_var=StringVar()
        self.daysonbook_var=StringVar()
        self.latereturnfine_var=StringVar()
        self.dateoverdue_var=StringVar()
        self.finalprice_var=StringVar()



        lbltitle=Label(self.root,text="LIBRARY MANAGEMENT SYSTEM",bg="ivory2",fg="green",bd=6,relief=RIDGE,font=("Open Sans",25,"bold"),padx=2,pady=6)
        lbltitle.pack(side=TOP,fill=X)


        frame=Frame(self.root,bd=6,relief=RIDGE,padx=20,bg="powder blue")
        frame.place(x=0,y=130,width=1530,height=400)
        
        # ============================ Data Frame Left ===================

        DataFrameLeft=LabelFrame(frame,text="Library Member Information",bg="ivory2",fg="green",bd=6,relief=RIDGE,font=("Open Sans",12,"bold"))
        DataFrameLeft.place(x=0,y=5,width=900,height=350)

        lblMember=Label(DataFrameLeft,text="Member type",font=("Open Sans",12),padx=2,pady=6)
        lblMember.grid(row=0,column=0,sticky=W)

        comMember=ttk.Combobox(DataFrameLeft,textvariable=self.membertype_var,font=("Open Sans",12),width=27,state="readonly")
        comMember["value"]=("Admin Staf","Student","Lecturer")
        comMember.grid(row=0,column=1,pady=10)

        lblPRN_NO=Label(DataFrameLeft,text="PRN No",font=("Open Sans",12),padx=2,pady=6)
        lblPRN_NO.grid(row=1,column=0,sticky=W)
        txt_Prn_NO=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.prnno_var,width=29)
        txt_Prn_NO.grid(row=1,column=1)

        lblId=Label(DataFrameLeft,text="Id",font=("Open Sans",12),padx=2,pady=6)
        lblId.grid(row=2,column=0,sticky=W)
        lblId=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.id_var,width=29)
        lblId.grid(row=2,column=1)

        lblFIrstName=Label(DataFrameLeft,text="First Name",font=("Open Sans",12),padx=2,pady=6)
        lblFIrstName.grid(row=3,column=0,sticky=W)
        lblFIrstName=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.firstname_var,width=29)
        lblFIrstName.grid(row=3,column=1)

        lblLastName=Label(DataFrameLeft,text="Last Name",font=("Open Sans",12),padx=2,pady=6)
        lblLastName.grid(row=4,column=0,sticky=W)
        lblLastName=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.lastname_var,width=29)
        lblLastName.grid(row=4,column=1)

        lblAddress1=Label(DataFrameLeft,text="Address1",font=("Open Sans",12),padx=2,pady=6)
        lblAddress1.grid(row=5,column=0,sticky=W)
        lblAddress1=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.address1_var,width=29)
        lblAddress1.grid(row=5,column=1)

        lblAddress2=Label(DataFrameLeft,text="Address2",font=("Open Sans",12),padx=2,pady=6)
        lblAddress2.grid(row=6,column=0,sticky=W)
        lblAddress2=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.address2_var,width=29)
        lblAddress2.grid(row=6,column=1)

        lblPostCode=Label(DataFrameLeft,text="Post Code",font=("Open Sans",12),padx=2,pady=6)
        lblPostCode.grid(row=7,column=0,sticky=W)
        lblPostCode=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.postcode_var,width=29)
        lblPostCode.grid(row=7,column=1)

        lblMobile=Label(DataFrameLeft,text="Mobile",font=("Open Sans",12),padx=2,pady=6)
        lblMobile.grid(row=8,column=0,sticky=W)
        lblMobile=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.mobile_var,width=29)
        lblMobile.grid(row=8,column=1)

        lblBookId=Label(DataFrameLeft,text="        Book Id",font=("Open Sans",12),padx=2,pady=6)
        lblBookId.grid(row=0,column=3,sticky=W)
        lblBookId=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.bookid_var,width=29)
        lblBookId.grid(row=0,column=4)

        lblBookTitle=Label(DataFrameLeft,text="        Book Title",font=("Open Sans",12),padx=2,pady=6)
        lblBookTitle.grid(row=1,column=3,sticky=W)
        lblBookTitle=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.booktitle_var,width=29)
        lblBookTitle.grid(row=1,column=4)

        lblAutherName=Label(DataFrameLeft,text="        Auther Name",font=("Open Sans",12),padx=2,pady=6)
        lblAutherName.grid(row=2,column=3,sticky=W)
        lblAutherName=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.auther_var,width=29)
        lblAutherName.grid(row=2,column=4)

        lblDateBorrowed=Label(DataFrameLeft,text="        Date Borrowed",font=("Open Sans",12),padx=2,pady=6)
        lblDateBorrowed.grid(row=3,column=3,sticky=W)
        lblDateBorrowed=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.dateborrowed_var,width=29)
        lblDateBorrowed.grid(row=3,column=4)

        lblDateDue=Label(DataFrameLeft,text="        Date Due",font=("Open Sans",12),padx=2,pady=6)
        lblDateDue.grid(row=4,column=3,sticky=W)
        lblDateDue=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.datedue_var,width=29)
        lblDateDue.grid(row=4,column=4)

        lblDaysOnBook=Label(DataFrameLeft,text="        Days on Book",font=("Open Sans",12),padx=2,pady=6)
        lblDaysOnBook.grid(row=5,column=3,sticky=W)
        lblDaysOnBook=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.daysonbook_var,width=29)
        lblDaysOnBook.grid(row=5,column=4)

        lblLateReturnFine=Label(DataFrameLeft,text="        Late Return Fine",font=("Open Sans",12),padx=2,pady=6)
        lblLateReturnFine.grid(row=6,column=3,sticky=W)
        lblLateReturnFine=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.latereturnfine_var,width=29)
        lblLateReturnFine.grid(row=6,column=4)

        lblDateOverDue=Label(DataFrameLeft,text="        Date Over Due",font=("Open Sans",12),padx=2,pady=6)
        lblDateOverDue.grid(row=7,column=3,sticky=W)
        lblDateOverDue=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.dateoverdue_var,width=29)
        lblDateOverDue.grid(row=7,column=4)

        lblActualPrice=Label(DataFrameLeft,text="        Actual price",font=("Open Sans",12),padx=2,pady=6)
        lblActualPrice.grid(row=8,column=3,sticky=W)
        lblActualPrice=Entry(DataFrameLeft,font=("Open Sans",12),textvariable=self.finalprice_var,width=29)
        lblActualPrice.grid(row=8,column=4)

        
        # ======================= Data Frame Right ===========================



        DataFrameRight=LabelFrame(frame,text="Book Details",bg="ivory2",fg="green",bd=6,relief=RIDGE,font=("Open Sans",12,"bold"))
        DataFrameRight.place(x=910,y=5,width=540,height=350)

        self.txtBox=Text(DataFrameRight,font=("Open Sans",12),width=32,height=16,padx=2,pady=6)
        self.txtBox.grid(row=0,column=2)

        listScrollbar=Scrollbar(DataFrameRight)
        listScrollbar.grid(row=0,column=1,sticky="ns")

        listBooks=["the one","king","best","London","Nepal one only","life is misserable","one","best","Dipesh","Diwas","Pandit","one journey to Nepal","USA","los angels","a day in kathmandu","mechine","Advance life in robotics","Python lamguage"]

        

        def selectBooks(value=""):
            value=str(listBox.get(listBox.curselection()))
            x=value
            if (x=="the one"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="king"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="best"):

                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")
            
            elif (x=="London"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="Nepal one only"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="life is misserable"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="one"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="best"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="Dipesh"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="Diwas"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="Pandit"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="one journey to Nepal"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")
            
            elif (x=="USA"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="los angles"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")

            elif (x=="a day in kathmandu"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")
            
            elif (x=="mechine"):
                self.bookid_var.set("6465464")
                self.booktitle_var.set('Python jnkl')
                self.auther_var.set("Dipesh Pandit")

                d1=datetime.date.today()
                d2=datetime.timedelta(days=15)
                d3=d1+d2

                self.dateborrowed_var.set(d1)
                self.datedue_var.set(d3)
                self.daysonbook_var.set(15)
                self.latereturnfine_var.set("Rs. 50")
                self.dateoverdue_var.set("No")
                self.finalprice_var.set("Rs. 700")
        



        listBox=Listbox(DataFrameRight,font=("Open Sans",12),width=20,height=16)
        listBox.bind("<<ListboxSelect>>",selectBooks)
        listBox.grid(row=0,column=0,padx=6)
        listScrollbar.config(command=listBox.yview)

        for item in listBooks:
            listBox.insert(END,item)

        # ================================  Buttom Frame =========================

        FrameButtom=Frame(self.root,bd=6,relief=RIDGE,padx=20,bg="powder blue")
        FrameButtom.place(x=0,y=530,width=1530,height=60)

        btnAddData=Button(FrameButtom,text="Add Data",command=self.add_data,font=("Open Sans",12),width=23,bg="white",fg="black")
        btnAddData.grid(row=0,column=0,padx=6,pady=5)

        btnAddData=Button(FrameButtom,text="Show Data",command=self.showdata,font=("Open Sans",12),width=23,bg="white",fg="black")
        btnAddData.grid(row=0,column=1,padx=6)

        btnAddData=Button(FrameButtom,text="Update",command=self.update,font=("Open Sans",12),width=23,bg="white",fg="black")
        btnAddData.grid(row=0,column=2,padx=6)

        btnAddData=Button(FrameButtom,text="Delete",command=self.delete,font=("Open Sans",12),width=23,bg="white",fg="black")
        btnAddData.grid(row=0,column=3,padx=6)

        btnAddData=Button(FrameButtom,text="Reset",command=self.reset,font=("Open Sans",12),width=23,bg="white",fg="black")
        btnAddData.grid(row=0,column=4,padx=6)

        btnAddData=Button(FrameButtom,text="Exit",command=self.exit,font=("Open Sans",12),width=23,bg="white",fg="black")
        btnAddData.grid(row=0,column=5,padx=6)

        # ================================ information Frame =========================

        FrameDetails=Frame(self.root,bd=6,relief=RIDGE,padx=20,bg="powder blue")
        FrameDetails.place(x=0,y=590,width=1530,height=210)

        Table_Frame=Frame(FrameDetails,bd=6,relief=RIDGE,bg="powder blue")
        Table_Frame.place(x=0,y=2,width=1460,height=190)

        xscroll=ttk.Scrollbar(Table_Frame,orient=HORIZONTAL)
        yscroll=ttk.Scrollbar(Table_Frame,orient=VERTICAL)

        self.library_table=ttk.Treeview(Table_Frame,column=("membertype","prnno","id","firstname","lastname","address1","address2","postcode","mobile","bookid","booktitle","auther","dateborrowed","datedue","daysonbook","latereturnfine","dateoverdue","finalprice"),xscrollcommand=xscroll.set,yscrollcommand=yscroll.set)

        xscroll.pack(side=BOTTOM,fill=X)
        yscroll.pack(side=RIGHT,fill=Y)

        xscroll.config(command=self.library_table.xview)
        yscroll.config(command=self.library_table.yview)

        self.library_table.heading("membertype",text="Member Type")
        self.library_table.heading("prnno",text="Reference No")
        self.library_table.heading("id",text="Id")
        self.library_table.heading("firstname",text="First Name")
        self.library_table.heading("lastname",text="Last Name")
        self.library_table.heading("address1",text="Address1")
        self.library_table.heading("address2",text="Address2")
        self.library_table.heading("postcode",text="Post ID")
        self.library_table.heading("mobile",text="Mobile Number")
        self.library_table.heading("bookid",text="Book ID")
        self.library_table.heading("booktitle",text="Book Title")
        self.library_table.heading("auther",text="Auther")
        self.library_table.heading("dateborrowed",text="Date of Borrowed")
        self.library_table.heading("datedue",text="Date Due")
        self.library_table.heading("daysonbook",text="DaysOnBook")
        self.library_table.heading("latereturnfine",text="LateReturnFine")
        self.library_table.heading("dateoverdue",text="DateOverDue")
        self.library_table.heading("finalprice",text="Final Price")

        self.library_table["show"]="headings"
        
        

        self.library_table.column("membertype",width=100)
        self.library_table.column("prnno",width=100)
        self.library_table.column("id",width=100)
        self.library_table.column("firstname",width=100)
        self.library_table.column("lastname",width=100)
        self.library_table.column("address1",width=100)
        self.library_table.column("address2",width=100)
        self.library_table.column("postcode",width=100)
        self.library_table.column("mobile",width=100)
        self.library_table.column("bookid",width=100)
        self.library_table.column("booktitle",width=100)
        self.library_table.column("auther",width=100)
        self.library_table.column("dateborrowed",width=100)
        self.library_table.column("datedue",width=100)
        self.library_table.column("daysonbook",width=100)
        self.library_table.column("latereturnfine",width=100)
        self.library_table.column("dateoverdue",width=100)
        self.library_table.column("finalprice",width=100)
        
        
        self.library_table.pack(fill=BOTH,expand=1)
        
        self.library_table.bind("<ButtonRelease-1>",self.get_cursor)
        self.fetch_data()

    def add_data(self):
        if self.membertype_var.get()=="" or self.prnno_var.get()=="" or self.id_var.get()=="" or self.firstname_var.get()=="" or self.lastname_var.get()=="" or self.address1_var.get()=="" or self.address2_var.get()=="" or self.postcode_var.get()=="" or self.mobile_var.get()=="" or self.bookid_var.get()=="" or self.booktitle_var.get()=="" or self.auther_var.get()=="" or self.dateborrowed_var.get()=="" or self.datedue_var.get()=="" or self.daysonbook_var.get()=="" or self.latereturnfine_var.get()=="" or self.dateoverdue_var.get()==""  or self.finalprice_var.get()=="" :
            messagebox.showerror("Error","All Fields are required",parent=self.root)
        else:
            conn=mysql.connector.connect(host="localhost",username="root",password="Mysql@123",database="database_2")
            my_cursor=conn.cursor()
            try:
                my_cursor.execute("insert into library values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",( #self......
                                                                                                                    self.membertype_var.get(),
                                                                                                                    self.prnno_var.get(),
                                                                                                                    self.id_var.get(),
                                                                                                                    self.firstname_var.get(),
                                                                                                                    self.lastname_var.get(),
                                                                                                                    self.address1_var.get(),
                                                                                                                    self.address2_var.get(),
                                                                                                                    self.postcode_var.get(),
                                                                                                                    self.mobile_var.get(),
                                                                                                                    self.bookid_var.get(),
                                                                                                                    self.booktitle_var.get(),
                                                                                                                    self.auther_var.get(),
                                                                                                                    self.dateborrowed_var.get(),
                                                                                                                    self.datedue_var.get(),
                                                                                                                    self.daysonbook_var.get(),
                                                                                                                    self.latereturnfine_var.get(),
                                                                                                                    self.dateoverdue_var.get(),
                                                                                                                    self.finalprice_var.get()))
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Success","Member has been addmited successfully",parent=self.root)
            except Exception as e:
                messagebox.showerror("Error",f"Due to {str(e)}",parent=self.root)



    def update(self):

        if self.membertype_var.get()=="" or self.prnno_var.get()=="" or self.id_var.get()=="" or self.firstname_var.get()=="" or self.lastname_var.get()=="" or self.address1_var.get()=="" or self.address2_var.get()=="" or self.postcode_var.get()=="" or self.mobile_var.get()=="" or self.bookid_var.get()=="" or self.booktitle_var.get()=="" or self.auther_var.get()=="" or self.dateborrowed_var.get()=="" or self.datedue_var.get()=="" or self.daysonbook_var.get()=="" or self.latereturnfine_var.get()=="" or self.dateoverdue_var.get()==""  or self.finalprice_var.get()=="" :
            messagebox.showerror("Error","All Fields are required",parent=self.root)
        else:
            conn=mysql.connector.connect(host="localhost",username="root",password="Mysql@123",database="database_2")
            my_cursor=conn.cursor()
            my_cursor.execute("update library set membertype=%s,id=%s,firstname=%s,lastname=%s,address1=%s,address2=%s,postcode=%s,mobile=%s,bookid=%s,booktitle=%s,auther=%s,dateborrowed=%s,datedue=%s,daysonbook=%s,latereturnfine=%s,dateoverdue=%s,finalprice=%s where prnno=%s",( #self......
                                                                                                                        self.membertype_var.get(),
                                                                                                                        
                                                                                                                        self.id_var.get(),
                                                                                                                        self.firstname_var.get(),
                                                                                                                        self.lastname_var.get(),
                                                                                                                        self.address1_var.get(),
                                                                                                                        self.address2_var.get(),
                                                                                                                        self.postcode_var.get(),
                                                                                                                        self.mobile_var.get(),
                                                                                                                        self.bookid_var.get(),
                                                                                                                        self.booktitle_var.get(),
                                                                                                                        self.auther_var.get(),
                                                                                                                        self.dateborrowed_var.get(),
                                                                                                                        self.datedue_var.get(),
                                                                                                                        self.daysonbook_var.get(),
                                                                                                                        self.latereturnfine_var.get(),
                                                                                                                        self.dateoverdue_var.get(),
                                                                                                                        self.finalprice_var.get(),
                                                                                                                        self.prnno_var.get(),
                                                                                                                        ))

            conn.commit()
            self.fetch_data()
            self.reset()
            conn.close()
            messagebox.showinfo("Success","Member has been updated successfully",parent=self.root)
                                                                                                                    





    def fetch_data(self):
        conn=mysql.connector.connect(host="localhost",username="root",password="Mysql@123",database="database_2")
        my_cursor=conn.cursor()
        my_cursor.execute("select * from library")
        rows=my_cursor.fetchall()

        if len(rows)!=0:
            self.library_table.delete(*self.library_table.get_children())
            for i in rows:
                self.library_table.insert("",END,values=i)
            conn.commit()
        conn.close()


    def get_cursor(self,value=""):
        cursor_row=self.library_table.focus()
        content=self.library_table.item(cursor_row)
        row=content["values"]
        #row=content[content]

        self.membertype_var.set(row[0]),
        self.prnno_var.set(row[1]),
        self.id_var.set(row[2]),
        self.firstname_var.set(row[3]),
        self.lastname_var.set(row[4]),
        self.address1_var.set(row[5]),
        self.address2_var.set(row[6]),
        self.postcode_var.set(row[7]),
        self.mobile_var.set(row[8]),
        self.bookid_var.set(row[9]),
        self.booktitle_var.set(row[10]),
        self.auther_var.set(row[11]),
        self.dateborrowed_var.set(row[12]),
        self.datedue_var.set(row[13]),
        self.daysonbook_var.set(row[14]),
        self.latereturnfine_var.set(row[15]),
        self.dateoverdue_var.set(row[16]),
        self.finalprice_var.set(row[17])

        #self.fetch_data()

    def showdata(self):
        self.txtBox.insert(END,"Member Type\t\t" + self.membertype_var.get() + "\n")
        self.txtBox.insert(END,"ID\t\t" + self.id_var.get() + "\n")
        self.txtBox.insert(END,"First Name\t\t" + self.firstname_var.get() + "\n")
        self.txtBox.insert(END,"Last Name\t\t" + self.lastname_var.get() + "\n")
        self.txtBox.insert(END,"Address1\t\t" + self.address1_var.get() + "\n")
        self.txtBox.insert(END,"Address2\t\t" + self.address2_var.get() + "\n")
        self.txtBox.insert(END,"Post Code\t\t" + self.postcode_var.get() + "\n")
        self.txtBox.insert(END,"Mobile\t\t" + self.mobile_var.get() + "\n")
        self.txtBox.insert(END,"Book Id\t\t" + self.bookid_var.get() + "\n")
        self.txtBox.insert(END,"Book Title\t\t" + self.booktitle_var.get() + "\n")
        self.txtBox.insert(END,"Auther\t\t" + self.auther_var.get() + "\n")
        self.txtBox.insert(END,"DateBorrowed\t\t" + self.dateborrowed_var.get() + "\n")
        self.txtBox.insert(END,"DateDue\t\t" + self.datedue_var.get() + "\n")
        self.txtBox.insert(END,"DaysOnBook\t\t" + self.daysonbook_var.get() + "\n")
        self.txtBox.insert(END,"lateReturnFine\t\t" + self.latereturnfine_var.get() + "\n")
        self.txtBox.insert(END,"DateOverDue\t\t" + self.dateoverdue_var.get() + "\n")
        self.txtBox.insert(END,"Actual Cost\t\t" + self.finalprice_var.get() + "\n")

        
    def reset(self):
        self.membertype_var.set("")
        self.prnno_var.set("")
        self.id_var.set("")
        self.firstname_var.set("")
        self.lastname_var.set("")
        self.address1_var.set("")
        self.address2_var.set("")
        self.postcode_var.set("")
        self.mobile_var.set("")
        self.bookid_var.set("")
        self.booktitle_var.set("")
        self.auther_var.set("")
        self.dateborrowed_var.set("")
        self.datedue_var.set("")
        self.daysonbook_var.set("")
        self.latereturnfine_var.set("")
        self.dateoverdue_var.set("")
        self.finalprice_var.set("")
        self.txtBox.delete("1.0",END)

        self.fetch_data()

    def exit(self):
        iExit=messagebox.askyesno("Library Manage System","Do you want to exit")
        if iExit>0:
            self.root.destroy()
            return

    def delete(self):
        
        
        if self.prnno_var.get()=="" or self.id_var.get()=="":
            messagebox.showerror("Error","First select the Member")

        else:
            conn=mysql.connector.connect(host="localhost",username="root",password="Mysql@123",database="database_2")
            my_cursor=conn.cursor()
            
            query="delete from library where prnno=%s"
            value=(self.prnno_var.get(),)
            my_cursor.execute(query,value)

            conn.commit()
            self.fetch_data()
            self.reset()
            #self.fetch_data()
            conn.close()
            
            messagebox.showinfo("Success","Member has been deleted")





    


        

        





if __name__ == "__main__":
    root=Tk()
    obj=Library_ManagementSystem(root)
    root.mainloop()
